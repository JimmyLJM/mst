## 定义
定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，
使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。
它是一种类行为型模式。


## 结构
抽象成命令，使调用者与实现者相关分离

- 抽象类（Abstract Class）角色：负责给出一个算法的轮廓和骨架。
    它由一个模板方法和若干个基本方法构成。这些方法的定义如下。  
    ① 模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。

    ② 基本方法：是整个算法中的一个步骤，包含以下几种类型。  
    抽象方法：在抽象类中申明，由具体子类实现。  
    具体方法：在抽象类中已经实现，在具体子类中可以继承或重写它。  
    钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。  
- 具体子类（Concrete Class）：实现抽象类中所定义的抽象方法和钩子方法，
    它们是一个顶级逻辑的一个组成步骤。
    
## 应用场景
- 当系统需要将请求调用者与请求接收者解耦时，命令模式使得调用者和接收者不直接交互。
- 当系统需要随机请求命令或经常增加或删除命令时，命令模式比较方便实现这些功能。
- 当系统需要执行一组操作时，命令模式可以定义宏命令来实现该功能。
- 当系统需要支持命令的撤销（Undo）操作和恢复（Redo）操作时，可以将命令对象存储起来，采用备忘录模式来实现。

## 优点&缺点

- 优点
  - 它封装了不变部分，扩展可变部分。它把认为是不变部分的算法封装到父类中实现，而把可变部分算法由子类继承实现，便于子类继续扩展。
  - 它在父类中提取了公共的部分代码，便于代码复用。
  - 部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。

- 缺点
  - 对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象。
  - 父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。






























