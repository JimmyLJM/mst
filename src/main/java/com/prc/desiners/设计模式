
## 软件设计模式的基本要素

软件设计模式使人们可以更加简单方便地复用成功的设计和体系结构，
它通常包含以下几个基本要素：模式名称、别名、动机、问题、解决方案、效果、
结构、模式角色、合作关系、实现方法、适用性、已知应用、例程、模式扩展和相关模式等，
其中最关键的元素包括以下 4 个主要部分

- 模式名称：每一个模式都有自己的名字，通常用一两个词来描述，
可以根据模式的问题、特点、解决方案、功能和效果来命名。
模式名称（PatternName）有助于我们理解和记忆该模式，也方便我们来讨论自己的设计。

- 问题：问题（Problem）描述了该模式的应用环境，即何时使用该模式。
它解释了设计问题和问题存在的前因后果，以及必须满足的一系列先决条件。

- 解决方案
模式问题的解决方案（Solution）包括设计的组成成分、它们之间的相互关系及各自的职责和协作方式。
因为模式就像一个模板，可应用于多种不同场合，所以解决方案并不描述一个特定而具体的设计或实现，
而是提供设计问题的抽象描述和怎样用一个具有一般意义的元素组合（类或对象的 组合）来解决这个问题。

- 效果
描述了模式的应用效果以及使用该模式应该权衡的问题，即模式的优缺点。
主要是对时间和空间的衡量，以及该模式对系统的灵活性、扩充性、可移植性的影响，也考虑其实现问题。
显式地列出这些效果（Consequence）对理解和评价这些模式有很大的帮助。


## 创建型模式的特点和分类 ⌒
创建型模式分为以下几种。
- ⌒单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。
- ⌒原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。
- ⌒工厂方法（FactoryMethod）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。
- ⌒抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。
- ⌒建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象

## 结构型模式分为以下 7 种：
- ⌒代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。
- ⌒适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。
- ⌒桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现的，从而降低了抽象和实现这两个可变维度的耦合度。
- ⌒装饰（Decorator）模式：动态地给对象增加一些职责，即增加其额外的功能。
- ⌒外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。
- ⌒享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。
- ⌒组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。


## 行为型模式是 GoF 设计模式中最为庞大的一类，它包含以下 11 种模式。
- 模板方法（Template Method）模式：定义一个操作中的算法骨架，将算法的一些步骤延迟到子类中，使得子类在可以不改变该算法结构的情况下重定义该算法的某些特定步骤。
- ⌒策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。
- ⌒命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。
- ⌒职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。
- ⌒状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。
- ⌒观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。
- ⌒中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。
- ⌒迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。
- ⌒访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。
- 备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。
- 解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。

























