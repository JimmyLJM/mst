## 简单了解
组合（Composite）模式的定义：有时又叫作部分-整体模式，
它是一种将对象组合成树状的层次结构的模式，用来表示“部分-整体”的关系，
使用户对单个对象和组合对象具有一致的访问性。

主要用于解决树形结构，下部分-整体”的关系


    
    
## 结构    
- 抽象构件（Component）角色：它的主要作用是为树叶构件和树枝构件声明公共接口，
并实现它们的默认行为。在透明式的组合模式中抽象构件还声明访问和管理子类的接口；
在安全式的组合模式中不声明访问和管理子类的接口，管理工作由树枝构件完成。
- 树叶构件（Leaf）角色：是组合中的叶节点对象，它没有子节点，
用于实现抽象构件角色中 声明的公共接口。
- 树枝构件（Composite）角色：是组合中的分支节点对象，它有子节点。
它实现了抽象构件角色中声明的接口，它的主要作用是存储和管理子部件，
通常包含 Add()、Remove()、GetChild() 等方法。


## 类型

- 透明式的组合模式
- 安全式的组合模式


### 透明式
抽象构件声明了所有子类中的全部方法，
所以客户端无须区别树叶对象和树枝对象，对客户端来说是透明的

缺点：树叶构件本来没有 Add()、Remove() 及 GetChild() 方法，
却要实现它们（空实现或抛异常），这样会带来一些安全性问题

### 安全式
将管理子构件的方法移到树枝构件中，抽象构件和树叶构件没有对子对象的管理方法

缺点：由于叶子和分支有不同的接口，客户端在调用时要知道树叶对象和树枝对象的存在，
所以失去了透明性

方法：
1、提供统一的默认实现方法的抽象类
2、将无需容器独有的行为写入容器类（树枝构件），但这样使用的时候必须显示声明树枝构件的实例

## 总结 & 应用场景

组合模式使用面向对象的思想来实现树形结构的构建与处理，描述了如何将容器对象和叶子对象进行递归组合，实现简单，灵活性好。  
由于在软件开发中存在大量的树形结构，因此组合模式是一种使用频率较高的结构型设计模式，Java SE中的AWT和Swing包的设计就基于组合模式，
在这些界面包中为用户提供了大量的容器构件（如Container）和成员构件（如Checkbox、Button和TextComponent等）
在XML解析、组织结构树处理、文件系统设计等领域，组合模式都得到了广泛应用

- 优点
    - 组合模式使得客户端代码可以一致地处理单个对象和组合对象，
    无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码；  
    - 更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码，
    满足“开闭原则”；
    - 客户端可以一致地使用一个组合结构或其中单个对象，不必关心处理的是单个对象还是整个组合结构，
    简化了客户端代码。
- 缺点
    - 设计较复杂，客户端需要花更多时间理清类之间的层次关系；
    - 不容易限制容器中的构件；
    - 不容易用继承的方法来增加构件的新功能；  


- 应用场景
    - 在具有整体和部分的层次结构中，希望通过一种方式忽略整体与部分的差异，客户端可以一致地对待它们。
    - 在一个使用面向对象语言开发的系统中需要处理一个树形结构
    - 在一个系统中能够分离出叶子对象和容器对象，而且它们的类型不固定，需要增加一些新的类型。














    
    
    
    




























    
    
    
    
    
    
    
    
    
    
    
    
    